swagger: '2.0'
info:
    description: This is a nodeMentoring2018Q4 API
    version: 1.0.0
    title: Node Mentoring 2018 Q4 API
    # put the contact info for your development or API team
    contact:
        email: yury.karalkou@gmail.com

    license:
        name: Apache 2.0
        url: http://www.apache.org/licenses/LICENSE-2.0.html

# during dev, should point to your local machine
host: 127.0.0.1:10010
# basePath prefixes all resource paths 
basePath: /api/v1
schemes:
    - http
    - https
# tags are used for organizing operations
tags:
    - name: users
      description: users' operations
    - name: products
      description: products' operations
    - name: cities
      description: cities' operations

## format of bodies a client can send (Content-Type)
#consumes:
#    - application/json
## format of the responses to the client (Accepts)
#produces:
#    - application/json
paths:
    /users:
        x-swagger-router-controller: users
        get:
            tags:
                - users
            summary: Returns all users
            description: Returns array of users in json format
            operationId: getUsers
            produces:
                - application/json
            parameters: [
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
            ]
            responses:
                200:
                    description: successful operation
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/User'
                400:
                    $ref: '#/responses/DatabaseError'
        post:
            tags:
                - users
            summary: Adds a new user to the db
            description: Adds a new user whether using json or via html form
            operationId: addUser
            consumes:
                - application/json
                - application/x-www-form-urlencoded
            produces:
                - application/json
            parameters:
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
                - in: body
                  name: body
                  description: User object that needs to be added to the store
                  required: true
                  schema:
                      $ref: '#/definitions/User'
            # - in: formData
            #   name: age
            #   type: string
            #   description: A person's age.
            # - in: formData
            #   name: name
            #   type: number
            #   description: A person's name.
            responses:
                200:
                    description: successful operation
                    schema:
                        $ref: '#/definitions/User'
                400:
                    $ref: '#/responses/DatabaseError'
    /users/{userId}:
        x-swagger-router-controller: users
        delete:
            tags:
                - users
            summary: Deletes a user
            operationId: deleteUser
            produces:
                - application/json
            parameters:
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
                - name: userId
                  in: path
                  description: User id to delete this User
                  required: true
                  type: integer
                  format: int64
            responses:
                400:
                    $ref: '#/responses/DatabaseError'
                404:
                    $ref: '#/responses/NotFoundById'

    /products:
        x-swagger-router-controller: products
        get:
            tags:
                - products
            summary: Returns all products
            description: Returns array of products
            operationId: getProducts
            produces:
                - application/json
            parameters: [
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
            ]
            responses:
                200:
                    description: successful operation
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/Product'
                400:
                    $ref: '#/responses/DatabaseError'
        post:
            tags:
                - products
            summary: Add a new product to the db
            operationId: addProduct
            consumes:
                - application/json
                - application/x-www-form-urlencoded
            produces:
                - application/json
            parameters:
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
                - in: body
                  name: body
                  description: Product object that needs to be added to the store
                  required: true
                  schema:
                      $ref: '#/definitions/Product'
            responses:
                200:
                    description: successful operation
                    schema:
                        $ref: '#/definitions/Product'
                400:
                    $ref: '#/responses/DatabaseError'
    /products/{productId}:
        x-swagger-router-controller: products
        get:
            tags:
                - products
            summary: Find product by ID
            description: Returns a single product
            operationId: getProductById
            produces:
                - application/json
            parameters:
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
                - name: productId
                  in: path
                  description: ID of product to return
                  required: true
                  type: integer
                  format: int64
            responses:
                200:
                    description: successful operation
                    schema:
                        $ref: '#/definitions/Product'
                400:
                    $ref: '#/responses/DatabaseError'
                404:
                    $ref: '#/responses/NotFoundById'
        delete:
            tags:
                - products
            summary: Deletes a product
            operationId: deleteProduct
            produces:
                - application/json
            parameters:
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
                - name: productId
                  in: path
                  description: Product id to delete
                  required: true
                  type: integer
                  format: int64
            responses:
                400:
                    $ref: '#/responses/DatabaseError'
                404:
                    $ref: '#/responses/NotFoundById'
    /products/{productId}/reviews:
        x-swagger-router-controller: products
        get:
            tags:
                - products
            summary: Find pet by ID
            description: Returns qty of reviews of single product
            operationId: getReviewsByProductId
            produces:
                - application/json
            parameters:
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
                - name: productId
                  in: path
                  description: ID of product to get reviews qty
                  required: true
                  type: integer
                  format: int64
            responses:
                200:
                    description: successful operation
                    schema:
                        type: object
                        properties:
                            reviews:
                                type: integer
                                format: int64
                400:
                    $ref: '#/responses/DatabaseError'
                404:
                    $ref: '#/responses/NotFoundById'

    /cities:
        x-swagger-router-controller: cities
        get:
            tags:
                - cities
            summary: Returns all cities
            description: Returns array of cities
            operationId: getAllCities
            produces:
                - application/json
            parameters: [
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
            ]
            responses:
                200:
                    description: successful operation
                    schema:
                        type: array
                        items:
                            $ref: '#/definitions/City'
                400:
                    $ref: '#/responses/DatabaseError'
        post:
            tags:
                - cities
            summary: Add a new city to the db
            operationId: createCity
            consumes:
                - application/json
                - application/x-www-form-urlencoded
            produces:
                - application/json
            parameters:
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
                - in: body
                  name: body
                  description: City object that needs to be added to the store
                  required: true
                  schema:
                      $ref: '#/definitions/City'
            responses:
                200:
                    description: successful operation
                    schema:
                        $ref: '#/definitions/City'
                400:
                    $ref: '#/responses/DatabaseError'
                404:
                    $ref: '#/responses/NotFoundById'
    /cities/{cityId}:
        x-swagger-router-controller: cities
        put:
            tags:
                - cities
            summary: Updates city by ID
            description: Updates a single city
            operationId: updateCityById
            consumes:
                - application/json
                - application/x-www-form-urlencoded
            produces:
                - application/json
            parameters:
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
                - name: cityId
                  in: path
                  description: ID of city to update
                  required: true
                  type: integer
                  format: int64
            responses:
                200:
                    description: successful operation
                    schema:
                        $ref: '#/definitions/City'
                400:
                    $ref: '#/responses/DatabaseError'
                404:
                    $ref: '#/responses/NotFoundById'
        delete:
            tags:
                - cities
            summary: Deletes a city
            operationId: deleteCity
            produces:
                - application/json
            parameters:
                # - name: api_key
                #   in: header
                #   required: false
                #   type: string
                - name: cityId
                  in: path
                  description: City id to delete
                  required: true
                  type: integer
                  format: int64
            responses:
                200:
                    description: successful operation
                    schema:
                        $ref: '#/definitions/City'
                400:
                    $ref: '#/responses/DatabaseError'
                404:
                    $ref: '#/responses/NotFoundById'
# Descriptions of common responses
responses:
    NotFound:
        description: The specified resource was not found
        # schema:
        #   $ref: '#/definitions/Error'
    NotFoundById:
        description: The specified resource was not found by provided ID
        # schema:
        #   $ref: '#/definitions/Error'
    DatabaseError:
        description: Something went wrong with DB, try again later
        # schema:
        #   $ref: '#/definitions/Error'
    Unauthorized:
        description: Unauthorized
        # schema:
        #   $ref: '#/definitions/Error'

# complex objects have schema definitions
definitions:
    User:
        type: object
        properties:
            id:
                type: integer
                format: int64
            name:
                type: string
            email:
                type: string
            password:
                type: string
                format: password
            company:
                type: string
            createdAt:
                type: string
                format: date-time
            lastModifiedDate:
                type: string
                format: date-time
        xml:
            name: User
    Product:
        type: object
        properties:
            id:
                type: integer
                format: int64
            name:
                type: string
            color:
                type: string
            isFavorite:
                type: boolean
            reviews:
                type: integer
                format: int64
            createdAt:
                type: string
                format: date-time
            lastModifiedDate:
                type: string
                format: date-time
        xml:
            name: Product
    City:
        type: object
        properties:
            id:
                type: integer
                format: int64
            name:
                type: string
            country:
                type: string
            capital:
                type: boolean
            location:
                $ref: '#/definitions/Location'
            createdAt:
                type: string
                format: date-time
            lastModifiedDate:
                type: string
                format: date-time
        xml:
            name: City
    Location:
        type: object
        properties:
            lat:
                type: string
            long:
                type: string
    # Schema for error response body
    Error:
        type: object
        properties:
            code:
                type: string
            message:
                type: string
        required:
            - code
            - message
